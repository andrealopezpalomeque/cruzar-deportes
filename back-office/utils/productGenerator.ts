import type { SharedProduct, CategoryType } from '../shared/types'
import { imageManifest } from './imageManifest'
import { teamCatalog } from '~/shared/catalog'

// Product metadata shared across apps via shared/catalog.ts
function buildCloudinaryFolderPath(teamKey: string, category: CategoryType): string {
  // The new structure is: cruzar-deportes/products/category/team
  // Based on the actual URLs in products.json, they use the new structure
  return `cruzar-deportes/products/${category}/${teamKey}`
}

export function generateAllProducts(): SharedProduct[] {
  const products: SharedProduct[] = []
  const now = new Date().toISOString()

  for (const [teamKey, teamInfo] of Object.entries(teamCatalog)) {
    // Pre-populate images using the smart manifest approach (no API calls!)
    let allAvailableImages: string[] = []

    try {
      // Get images directly from manifest (synchronous, fast!)
      const categoryImages = imageManifest[teamInfo.category]
      if (categoryImages && categoryImages[teamKey]) {
        // Convert local paths to Cloudinary URLs
        allAvailableImages = categoryImages[teamKey].map(localPath => {
          const publicId = localPath
            .replace(/^\/?images\//, '')
            .replace(/\.(jpg|jpeg|png|webp)$/i, '')
          return `https://res.cloudinary.com/dmb1vyveg/image/upload/cruzar-deportes/products/${publicId}`
        })
      }
    } catch (error) {
      console.warn(`Could not load images for ${teamKey}:`, error)
      allAvailableImages = []
    }

    const product: SharedProduct = {
      id: `team-${teamKey}`,
      name: teamInfo.name,
      slug: teamKey.replace(/_/g, '-'),
      description: teamInfo.description,
      price: teamInfo.price,
      originalPrice: teamInfo.originalPrice,
      category: teamInfo.category,
      selectedImages: [], // Empty by default - will be populated when managed
      allAvailableImages, // Pre-populated from manifest - no API calls needed!
      cloudinaryFolderPath: buildCloudinaryFolderPath(teamKey, teamInfo.category),
      sizes: ['S', 'M', 'L', 'XL', 'XXL'],
      colors: ['Home', 'Away'],
      inStock: true,
      stockStatus: 'in_stock',
      featured: false, // Not featured by default
      lastModified: now,
      isProcessed: false, // Mark as unprocessed by default - will be true when managed
      createdAt: now,
      createdBy: 'system' // Generated by system
    }

    products.push(product)
  }

  return products
}
